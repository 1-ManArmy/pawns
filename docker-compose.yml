version: '3.8'

services:
  # Frontend Application
  onelastai-frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NODE_ENV=production
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mongodb
      - redis
    networks:
      - onelastai-network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: onelastai
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    ports:
      - "27017:27017"
    networks:
      - onelastai-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - onelastai-network
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}

  # Backend API (if needed)
  onelastai-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/onelastai
      - REDIS_URL=redis://redis:6379
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - mongodb
      - redis
    networks:
      - onelastai-network
    restart: unless-stopped

  # Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "8080:80"
    depends_on:
      - onelastai-frontend
    networks:
      - onelastai-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  onelastai-network:
    driver: bridge